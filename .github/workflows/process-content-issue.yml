name: Process Department Content

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  generate-content:
    runs-on: ubuntu-latest
    steps:
      - name: 立即回复“已收到，正在处理...”
        id: initial-comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "✅ 已收到您的投稿请求，正在处理...\n\n请稍等，我们会尽快完成解析并生成内容。"
            });

            core.setOutput("comment_id", response.data.id);

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 安装依赖
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.35.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          pip install pyyaml

      - name: 提取模板字段
        id: extract-fields
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          cat > extract.py << 'EOF'
          import os, sys, re

          def unescape_markdown(text):
              if not text:
                  return text
              return text.replace('\\*', '*').replace('\\#', '#').replace('\\`', '`').replace('\\\\', '\\')

          def extract_section(body, section_name):
              marker = f"### {section_name}"
              start = body.find(marker)
              if start == -1:
                  return None
              start += len(marker)
              next_section = body.find("###", start)
              return body[start:next_section].strip() if next_section != -1 else body[start:].strip()

          def extract_content(body):
              start = body.find("```markdown")
              if start == -1:
                  return None
              start = body.find("\n", start) + 1
              end = body.rfind("```")
              return unescape_markdown(body[start:end].strip()) if end > start else None

          body = os.environ.get("ISSUE_BODY", "")
          department = extract_section(body, "部门名称")
          title = extract_section(body, "标题")
          filename = extract_section(body, "文件名")
          content = extract_content(body)

          missing = [f for f, v in [("部门名称", department), ("文件名", filename), ("主要内容", content)] if not v]
          if missing:
              print(f"错误: 缺少字段: {', '.join(missing)}")
              sys.exit(1)

          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"DEPARTMENT={department}\n")
              f.write(f"FILENAME={filename}\n")
              if title:
                  f.write(f"TITLE={title}\n")
              f.write(f"CONTENT<<EOF_CONTENT\n{content}\nEOF_CONTENT\n")
          EOF

          python extract.py

      - name: 匹配部门目录
        id: find-department
        env:
          DEPARTMENT: ${{ steps.extract-fields.outputs.DEPARTMENT }}
        run: |
          BASE_DIR="src"
          TARGET_DIR=""

          for dir in $(find $BASE_DIR -maxdepth 1 -type d); do
            readme="$dir/README.md"
            if [ -f "$readme" ]; then
              title=$(sed -n '/^title:/ s/title: //p' $readme)
              if [ "$title" = "$DEPARTMENT" ]; then
                TARGET_DIR="${dir#*/}"
                break
              fi
            fi
          done

          if [ -z "$TARGET_DIR" ]; then
            echo "未找到匹配部门目录！"
            exit 1
          fi

          echo "target_dir=$TARGET_DIR" >> $GITHUB_OUTPUT

      - name: 生成文件
        id: generate-file
        env:
          DEPARTMENT: ${{ steps.extract-fields.outputs.DEPARTMENT }}
          FILENAME: ${{ steps.extract-fields.outputs.FILENAME }}
          TITLE: ${{ steps.extract-fields.outputs.TITLE }}
          CONTENT: ${{ steps.extract-fields.outputs.CONTENT }}
          TARGET_DIR: ${{ steps.find-department.outputs.target_dir }}
          ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
        run: |
          CLEAN_FILENAME=$(echo "$FILENAME" | tr ' ' '-' | tr -cd '[:alnum:]-_')
          FILE_PATH="src/$TARGET_DIR/${CLEAN_FILENAME}.md"
          echo "file_path=$FILE_PATH" >> $GITHUB_OUTPUT

          echo "---" > $FILE_PATH
          echo "title: ${TITLE:-来自 $DEPARTMENT 的投稿}" >> $FILE_PATH
          echo "---" >> $FILE_PATH
          echo "$CONTENT" >> $FILE_PATH
          echo "---" >> $FILE_PATH
          echo "> 投稿人: [@$ISSUE_AUTHOR](https://github.com/$ISSUE_AUTHOR)" >> $FILE_PATH

      - name: 创建分支并提交更改
        id: create-branch
        env:
          FILE_PATH: ${{ steps.generate-file.outputs.file_path }}
        run: |
          BRANCH_NAME="content-update-$(date +%Y%m%d%H%M%S)"
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b $BRANCH_NAME
          git add "$FILE_PATH"
          git commit -m "添加内容: ${{ steps.extract-fields.outputs.FILENAME }} (部门: ${{ steps.extract-fields.outputs.DEPARTMENT }})"
          git push --force origin $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: 使用GitHub API创建PR
        id: create-pr-api
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `内容投稿: ${{ steps.extract-fields.outputs.DEPARTMENT }} - ${{ steps.extract-fields.outputs.TITLE || steps.extract-fields.outputs.FILENAME }}`;
            const result = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: `closes #${context.issue.number}`,
              head: process.env.BRANCH_NAME,
              base: 'main'
            });

            core.setOutput("pr_url", result.data.html_url);

      - name: 处理完成后修改评论内容
        if: always()
        uses: actions/github-script@v6
        env:
          COMMENT_ID: ${{ steps.initial-comment.outputs.comment_id }}
          FILE_PATH: ${{ steps.generate-file.outputs.file_path }}
          BRANCH_NAME: ${{ steps.create-branch.outputs.branch_name }}
          PR_URL: ${{ steps.create-pr-api.outputs.pr_url }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentId = process.env.COMMENT_ID;
            const message = '${{ success() }}' === 'true' ?
              `✅ **处理完成！**\n- 生成文件路径: \`${process.env.FILE_PATH}\`\n- [Pull Request 已创建](${process.env.PR_URL})\n- 相关分支: \`${process.env.BRANCH_NAME}\``
              :
              `⚠ **处理失败！**\n- 请检查 Issue 格式，确保所有必要字段正确填写。`;

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: message
            });
