name: Process Department Content

on:
  issues:
    types: [opened, edited]

jobs:
  generate-content:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 需要完整历史记录来创建新分支

      - name: 安装依赖
        run: |
          sudo apt-get install -y yq  # 安装 YAML 处理器
          pip install pyyaml          # 安装 Python YAML 库

      - name: 提取模板字段
        id: extract-fields
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          # 使用更简单的Python解析方法
          python - <<EOF
          import os, sys

          def extract_section(body, section_name):
              """提取指定部分的内容"""
              if not body:
                  return None
                  
              marker = f"### {section_name}"
              if marker not in body:
                  return None
                  
              # 找到部分的开始
              start = body.find(marker) + len(marker)
              
              # 找到下一个部分的开始（如果有）
              next_section = body.find("###", start)
              if next_section != -1:
                  section_content = body[start:next_section]
              else:
                  section_content = body[start:]
                  
              return section_content.strip()
              
          def extract_content(body):
              """提取主要内容（代码块）"""
              section = extract_section(body, "主要内容")
              if not section:
                  return None
                  
              # 查找代码块
              start = section.find("```")
              if start == -1:
                  return None
                  
              # 跳过```行
              start = section.find("\n", start) + 1
              if start == 0:  # 没有找到换行符
                  return None
                  
              # 找到结束的```
              end = section.find("```", start)
              if end == -1:
                  return None
                  
              return section[start:end].strip()

          # 主程序
          body = os.environ.get('ISSUE_BODY', '')
          print("Issue内容:", body[:100] + "..." if len(body) > 100 else body)
          
          # 提取各个部分
          department = extract_section(body, "部门名称")
          title = extract_section(body, "标题")
          filename = extract_section(body, "文件名")
          content = extract_content(body)
          
          # 打印提取结果（调试用）
          print(f"部门名称: {department}")
          print(f"标题: {title}")
          print(f"文件名: {filename}")
          print(f"内容长度: {len(content) if content else 0}")
          
          # 验证必要字段
          missing = []
          if not department:
              missing.append("部门名称")
          if not filename:
              missing.append("文件名")
          if not content:
              missing.append("主要内容")
              
          if missing:
              print(f"错误: 缺少必要字段: {', '.join(missing)}")
              sys.exit(1)
          
          # 输出到环境变量
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"DEPARTMENT={department}\n")
              f.write(f"FILENAME={filename}\n")
              if title:
                  f.write(f"TITLE={title}\n")
              f.write(f"CONTENT<<EOF\n{content}\nEOF\n")
          EOF

      - name: 检查Issue解析失败
        if: ${{ failure() && steps.extract-fields.outcome == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ 错误：无法从Issue内容中提取必要信息。请确保包含以下必要字段：\n\n```\n### 部门名称\n<部门名称>\n\n### 文件名\n<文件名>\n\n### 主要内容\n```markdown\n<内容>\n```\n```'
            })

      - name: 匹配部门目录
        id: find-department
        env:
          DEPARTMENT: ${{ steps.extract-fields.outputs.DEPARTMENT }}
        run: |
          # 遍历 src 子目录查找匹配的 title
          BASE_DIR="src"
          TARGET_DIR=""
          
          for dir in $(find $BASE_DIR -maxdepth 1 -type d); do
            readme="$dir/README.md"
            if [ -f "$readme" ]; then
              frontmatter=$(sed -n '/^---$/,/^---$/p' $readme | head -n -1 | tail -n +2)
              title=$(echo "$frontmatter" | yq eval '.title' -)
              
              if [ "$title" = "$DEPARTMENT" ]; then
                TARGET_DIR="${dir#*/}"  # 去除前面的 src/
                break
              fi
            fi
          done

          if [ -z "$TARGET_DIR" ]; then
            echo "未找到匹配部门目录！"
            exit 1
          fi

          echo "target_dir=$TARGET_DIR" >> $GITHUB_OUTPUT

      - name: 生成文件
        env:
          DEPARTMENT: ${{ steps.extract-fields.outputs.DEPARTMENT }}
          FILENAME: ${{ steps.extract-fields.outputs.FILENAME }}
          TITLE: ${{ steps.extract-fields.outputs.TITLE }}
          CONTENT: ${{ steps.extract-fields.outputs.CONTENT }}
          TARGET_DIR: ${{ steps.find-department.outputs.target_dir }}
        run: |
          # 清理文件名并创建路径
          CLEAN_FILENAME=$(echo "$FILENAME" | tr ' ' '-' | tr -cd '[:alnum:]-_')
          FILE_PATH="src/$TARGET_DIR/${CLEAN_FILENAME}.md"
          
          # 写入内容
          ARTICLE_TITLE="${TITLE:-来自 $DEPARTMENT 的投稿}"
          echo "# $ARTICLE_TITLE" > $FILE_PATH
          echo -e "\n---\n" >> $FILE_PATH
          echo "$CONTENT" >> $FILE_PATH
          echo -e "\n---\n" >> $FILE_PATH
          echo "> 投稿人: @${{ github.event.issue.user.login }}" >> $FILE_PATH

      - name: 创建 Pull Request
        uses: peter-evans/create-pull-request@v5
        env:
          DEPARTMENT: ${{ steps.extract-fields.outputs.DEPARTMENT }}
          FILENAME: ${{ steps.extract-fields.outputs.FILENAME }}
          TITLE: ${{ steps.extract-fields.outputs.TITLE }}
          TARGET_DIR: ${{ steps.find-department.outputs.target_dir }}
        with:
          branch: "content-update/${{ steps.extract-fields.outputs.FILENAME }}-${{ github.run_id }}"
          base: main
          title: "内容投稿: ${{ steps.extract-fields.outputs.DEPARTMENT }} - ${{ steps.extract-fields.outputs.TITLE || steps.extract-fields.outputs.FILENAME }}"
          body: |
            由 Issue #${{ github.event.issue.number }} 自动生成
            部门目录: `src/${{ steps.find-department.outputs.target_dir }}`
          commit-message: "添加内容: ${{ steps.extract-fields.outputs.FILENAME }} (部门: ${{ steps.extract-fields.outputs.DEPARTMENT }})"
          labels: "content-submission"

      - name: 检查部门是否存在
        if: ${{ failure() && steps.find-department.outcome == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ 错误：未找到与部门名称匹配的目录，请检查部门名称是否正确'
            })
