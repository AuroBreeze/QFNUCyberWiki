name: Process Department Content

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  generate-content:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 需要完整历史记录来创建新分支

      - name: 安装依赖
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.35.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          pip install pyyaml

      - name: 提取模板字段
        id: extract-fields
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          cat > extract.py << 'EOF'
          import os, sys, re, html

          def unescape_markdown(text):
              """解除Markdown转义"""
              if not text:
                  return text
              text = text.replace('\\*', '*')
              text = text.replace('\\#', '#')
              text = text.replace('\\`', '`')
              text = text.replace('\\\\', '\\')
              return text

          def extract_section(body, section_name):
              """提取指定部分的内容"""
              if not body:
                  return None
              marker = "### " + section_name
              alt_marker = "**" + section_name + "**"
              if marker in body:
                  print(f"找到标准标记 '{marker}'")
                  start = body.find(marker) + len(marker)
                  next_section = body.find("###", start)
                  if next_section != -1:
                      section_content = body[start:next_section]
                  else:
                      section_content = body[start:]
                  return section_content.strip()
              elif section_name + " " in body:
                  print(f"尝试从表格提取 '{section_name}'")
                  pattern = r'(?:' + re.escape(section_name) + r'|' + re.escape(alt_marker) + r')\s+([^\n|]+)'
                  match = re.search(pattern, body)
                  if match:
                      print(f"从表格模式提取到 '{section_name}': {match.group(1)}")
                      return match.group(1).strip()
                  print(f"警告: 未找到标记 '{marker}' 或表格中的 '{section_name}'")
                  return None

          def extract_content(body):
              """提取内容 - 从第一个```markdown开始，到倒数第二行为止"""
              print("使用新的内容提取方法：从```markdown开始到倒数第二行")
              markdown_start = body.find("```markdown")
              if markdown_start == -1:
                  markdown_start = body.find("\\```markdown")
                  if markdown_start == -1:
                      markdown_start = body.find("```")
                      if markdown_start == -1:
                          print("警告: 未找到任何Markdown代码块标记")
                          if "\\#" in body:
                              print("尝试提取转义的Markdown内容")
                              if "主要内容" in body:
                                  content_start = body.find("主要内容") + len("主要内容")
                                  content = body[content_start:].strip()
                                  content = unescape_markdown(content)
                                  return content
                              section = extract_section(body, "主要内容")
                              if section:
                                  return section
                          return None
              content_start = body.find("\n", markdown_start) + 1
              if content_start <= 0:
                  print("警告: Markdown代码块格式异常")
                  return None
              raw_content = body[content_start:]
              lines = raw_content.split("\n")
              if len(lines) <= 3:
                  content = "\n".join(lines)
                  return content
              content_lines = lines[:-2]
              end_index = len(content_lines)
              for i, line in enumerate(content_lines):
                  if line.strip() == "```" or line.strip() == "\\```":
                      end_index = i
                      break
                  if line.startswith("|") and i > 10:
                      if all(c in "|" for c in line.strip()):
                          end_index = i
                          break
              content = "\n".join(content_lines[:end_index])
              content = unescape_markdown(content)
              content = content.replace('\\n', '\n')
              print(f"从Markdown块提取了{len(content_lines[:end_index])}行内容")
              print("内容前100字符:", content[:100].replace("\n", "\\n") + ("..." if len(content) > 100 else ""))
              return content

          body = os.environ.get("ISSUE_BODY", "")
          print("Issue内容长度:", len(body))
          print("Issue内容前300字符:", body[:300].replace("\n", "\\n") + ("..." if len(body) > 300 else ""))
          try:
              if "|" in body and "-|-" in body:
                  print("检测到可能的表格格式")
              department = extract_section(body, "部门名称")
              title = extract_section(body, "标题")
              filename = extract_section(body, "文件名")
              content = extract_content(body)
              print("提取结果:")
              print(f"部门名称: {department}")
              print(f"标题: {title}")
              print(f"文件名: {filename}")
              print(f"内容长度: {len(content) if content else 0}")
              missing = []
              if not department:
                  missing.append("部门名称")
              if not filename:
                  missing.append("文件名")
              if not content:
                  missing.append("主要内容")
              if missing:
                  print(f"错误: 缺少必要字段: {', '.join(missing)}")
                  sys.exit(1)
              with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                  f.write(f"DEPARTMENT={department}\n")
                  f.write(f"FILENAME={filename}\n")
                  if title:
                      f.write(f"TITLE={title}\n")
                  f.write(f"CONTENT<<EOF_CONTENT\n{content}\nEOF_CONTENT\n")
          except Exception as e:
              print(f"提取过程中发生错误: {str(e)}")
              import traceback
              traceback.print_exc()
              sys.exit(1)
          EOF
          python extract.py

      - name: 检查Issue解析失败
        if: ${{ failure() && steps.extract-fields.outcome == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ 错误：无法从Issue内容中提取必要信息。请确保包含以下必要字段：\n\n```\n### 部门名称\n<部门名称>\n\n### 文件名\n<文件名>\n\n### 主要内容\n```markdown\n<内容>\n```\n```'
            });

      - name: 检查内容语法
        id: syntax-check
        run: |
          echo "开始检查内容语法..."
          echo "${{ steps.extract-fields.outputs.CONTENT }}" > content.md
          npm install -g markdownlint-cli
          markdownlint content.md > errors.txt || true
          if [ -s errors.txt ]; then
            echo "语法错误检测到"
            cat errors.txt
            exit 1
          else
            echo "未检测到语法错误"
          fi

      - name: 语法错误反馈
        if: ${{ failure() && steps.syntax-check.outcome == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const errors = fs.readFileSync('errors.txt', 'utf8');
            const suggestions = "请检查 Markdown 代码块是否完整，注意反引号和标记是否匹配。";
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ 检查到内容语法错误:\n\n\`\`\`\n${errors}\n\`\`\`\n${suggestions}`
            });

      - name: 匹配部门目录
        id: find-department
        env:
          DEPARTMENT: ${{ steps.extract-fields.outputs.DEPARTMENT }}
        run: |
          BASE_DIR="src"
          TARGET_DIR=""
          for dir in $(find $BASE_DIR -maxdepth 1 -type d); do
            readme="$dir/README.md"
            if [ -f "$readme" ]; then
              frontmatter=$(sed -n '/^---$/,/^---$/p' $readme | head -n -1 | tail -n +2)
              title=$(python -c "import yaml; print(yaml.safe_load('''$frontmatter''').get('title', ''))")
              if [ "$title" = "$DEPARTMENT" ]; then
                TARGET_DIR="${dir#*/}"  # 去除前面的 src/
                break
              fi
            fi
          done
          if [ -z "$TARGET_DIR" ]; then
            echo "未找到匹配部门目录！"
            exit 1
          fi
          echo "target_dir=$TARGET_DIR" >> $GITHUB_OUTPUT

      - name: 生成文件
        id: generate-file
        env:
          DEPARTMENT: ${{ steps.extract-fields.outputs.DEPARTMENT }}
          FILENAME: ${{ steps.extract-fields.outputs.FILENAME }}
          TITLE: ${{ steps.extract-fields.outputs.TITLE }}
          CONTENT: ${{ steps.extract-fields.outputs.CONTENT }}
          TARGET_DIR: ${{ steps.find-department.outputs.target_dir }}
          ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
        run: |
          CLEAN_FILENAME=$(echo "$FILENAME" | tr ' ' '-' | tr -cd '[:alnum:]-_')
          FILE_PATH="src/$TARGET_DIR/${CLEAN_FILENAME}.md"
          echo "file_path=$FILE_PATH" >> $GITHUB_OUTPUT
          echo "clean_filename=$CLEAN_FILENAME" >> $GITHUB_OUTPUT
          ARTICLE_TITLE="${TITLE:-来自 $DEPARTMENT 的投稿}"
          echo "---" > $FILE_PATH
          echo "title: $ARTICLE_TITLE" >> $FILE_PATH
          echo "---" >> $FILE_PATH
          echo "" >> $FILE_PATH
          echo "$CONTENT" >> $FILE_PATH
          echo "" >> $FILE_PATH
          echo "---" >> $FILE_PATH
          echo "" >> $FILE_PATH
          echo "> 投稿人: [@$ISSUE_AUTHOR](https://github.com/$ISSUE_AUTHOR)" >> $FILE_PATH

      - name: 创建分支并提交更改
        id: create-branch
        env:
          FILENAME: ${{ steps.extract-fields.outputs.FILENAME }}
          FILE_PATH: ${{ steps.generate-file.outputs.file_path }}
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BRANCH_NAME="content-update/$FILENAME-$TIMESTAMP"
          echo "使用分支名: $BRANCH_NAME"
          git fetch origin
          if git show-ref --verify --quiet "refs/remotes/origin/$BRANCH_NAME"; then
            echo "分支 $BRANCH_NAME 已存在，使用新名称"
            BRANCH_NAME="content-update/$FILENAME-$TIMESTAMP-$RANDOM"
            echo "新分支名: $BRANCH_NAME"
          fi
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b $BRANCH_NAME
          git add "$FILE_PATH"
          git commit -m "添加内容: $FILENAME (部门: ${{ steps.extract-fields.outputs.DEPARTMENT }})"
          git push --force origin $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "repo_url=https://github.com/${{ github.repository }}" >> $GITHUB_OUTPUT

      - name: 使用GitHub API创建PR
        id: create-pr-api
        continue-on-error: true
        uses: actions/github-script@v6
        env:
          BRANCH_NAME: ${{ steps.create-branch.outputs.branch_name }}
          DEPARTMENT: ${{ steps.extract-fields.outputs.DEPARTMENT }}
          FILENAME: ${{ steps.extract-fields.outputs.FILENAME }}
          TITLE: ${{ steps.extract-fields.outputs.TITLE }}
          TARGET_DIR: ${{ steps.find-department.outputs.target_dir }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `内容投稿: ${process.env.DEPARTMENT} - ${process.env.TITLE || process.env.FILENAME}`;
            const body = `由 Issue #${context.issue.number} 自动生成\n\n部门目录: \`src/${process.env.TARGET_DIR}\`\n\n---\n\ncloses #${context.issue.number}`;
            try {
              const result = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                head: process.env.BRANCH_NAME,
                base: 'main'
              });
              console.log(`PR created: ${result.data.html_url}`);
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: result.data.number,
                maintainer_can_modify: true
              });
              return { 
                pr_number: result.data.number,
                pr_url: result.data.html_url
              };
            } catch (error) {
              console.log(`Error creating PR: ${error.message}`);
              return { error: error.message };
            }

      - name: 通知PR创建成功
        if: ${{ success() && steps.create-pr-api.outcome == 'success' && contains(steps.create-pr-api.outputs.result, 'pr_number') }}
        uses: actions/github-script@v6
        with:
          script: |
            let result;
            try {
              result = JSON.parse('${{ steps.create-pr-api.outputs.result }}');
            } catch (error) {
              console.log('Failed to parse PR result: ' + error.message);
              return;
            }
            if (!result || !result.pr_number || !result.pr_url) {
              console.log('Invalid PR result format');
              return;
            }
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ 文件已成功生成！\n\nPull Request 已创建: [#${result.pr_number}](${result.pr_url})\n\n文件路径: \`${{ steps.generate-file.outputs.file_path }}\`\n\n当PR被合并时，此Issue将自动关闭，分支将自动删除。`
            });

      - name: PR创建状态通知
        if: ${{ always() && (steps.create-pr-api.outcome == 'failure' || !contains(steps.create-pr-api.outputs.result, 'pr_number')) }}
        uses: actions/github-script@v6
        with:
          script: |
            let errorMsg = '未知错误';
            try {
              const result = JSON.parse('${{ steps.create-pr-api.outputs.result || '{"error":"未知错误"}' }}');
              if (result && result.error) {
                errorMsg = result.error;
              }
            } catch (error) {
              console.log('Failed to parse error result: ' + error.message);
            }
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ 文件已成功生成并提交到分支 \`${{ steps.create-branch.outputs.branch_name }}\`！\n\n但无法自动创建Pull Request。错误信息：${errorMsg}\n\n请手动完成以下步骤：\n\n1. 点击此链接创建PR: ${{ steps.create-branch.outputs.repo_url }}/compare/main...${{ steps.create-branch.outputs.branch_name }}?expand=1\n2. 设置标题为: "内容投稿: ${{ steps.extract-fields.outputs.DEPARTMENT }} - ${{ steps.extract-fields.outputs.TITLE || steps.extract-fields.outputs.FILENAME }}"\n3. 在PR描述中添加 "closes #${context.issue.number}" 以便合并时自动关闭Issue\n4. 审核文件 \`${{ steps.generate-file.outputs.file_path }}\` 并提交PR\n5. 勾选"自动删除head分支"选项\n\n**提示**: 如需解决此问题，可以在仓库设置中启用"Allow GitHub Actions to create and approve pull requests"选项。`
            });

      - name: 检查部门是否存在
        if: ${{ failure() && steps.find-department.outcome == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ 错误：未找到与部门名称匹配的目录，请检查部门名称是否正确'
            });
