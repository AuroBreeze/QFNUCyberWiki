name: 处理内容提交Issues并创建PR

on:
  issues:
    types: [opened, edited]

jobs:
  process-issue:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: 安装依赖
        run: npm install @actions/github @actions/core gray-matter fs-extra

      - name: 处理Issue并创建PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs-extra');
            const path = require('path');
            const matter = require('gray-matter');
            const { context } = require('@actions/github');
            
            async function run() {
              try {
                const issue = context.payload.issue;
                if (!issue || !issue.body) {
                  console.log('未找到有效的Issue内容');
                  return;
                }
                
                // 解析Issue内容
                const body = issue.body;
                
                // 提取部门名称
                const departmentMatch = body.match(/### 部门名称\s*\n\s*(.*?)(?:\n|$)/);
                if (!departmentMatch || !departmentMatch[1]) {
                  console.log('未找到部门名称');
                  return;
                }
                const departmentName = departmentMatch[1].trim();
                console.log(`部门名称: ${departmentName}`);
                
                // 提取标题
                const titleMatch = body.match(/### 标题\s*\n\s*(.*?)(?:\n|$)/);
                const contentTitle = titleMatch && titleMatch[1] ? titleMatch[1].trim() : '未命名内容';
                console.log(`内容标题: ${contentTitle}`);
                
                // 提取文件名
                const filenameMatch = body.match(/### 文件名\s*\n\s*(.*?)(?:\n|$)/);
                let filename = filenameMatch && filenameMatch[1] ? filenameMatch[1].trim() : '';
                if (!filename) {
                  // 如果没有提供文件名，则使用标题的拼音或英文
                  filename = contentTitle.replace(/\s+/g, '-').toLowerCase();
                  // 确保文件名只包含字母、数字、连字符和下划线
                  filename = filename.replace(/[^a-z0-9\-_]/g, '');
                }
                filename = `${filename}.md`;
                console.log(`文件名: ${filename}`);
                
                // 提取Markdown内容
                const contentMatch = body.match(/### 主要内容\s*\n\s*([\s\S]*?)(?:\n###|$)/);
                const markdownContent = contentMatch && contentMatch[1] ? contentMatch[1].trim() : '';
                console.log(`提取到Markdown内容长度: ${markdownContent.length}`);
                
                // 扫描src目录，查找匹配的部门目录
                const srcDir = 'src';
                const directories = fs.readdirSync(srcDir, { withFileTypes: true })
                  .filter(dirent => dirent.isDirectory())
                  .map(dirent => dirent.name);
                
                let targetDir = null;
                
                for (const dir of directories) {
                  const readmePath = path.join(srcDir, dir, 'README.md');
                  if (fs.existsSync(readmePath)) {
                    const readmeContent = fs.readFileSync(readmePath, 'utf8');
                    const { data } = matter(readmeContent);
                    
                    if (data.title && data.title === departmentName) {
                      targetDir = dir;
                      console.log(`找到匹配的目录: ${targetDir}`);
                      break;
                    }
                  }
                }
                
                if (!targetDir) {
                  console.log(`未找到与部门名称 "${departmentName}" 匹配的目录`);
                  return;
                }
                
                // 创建分支
                const branchName = `content-${issue.number}-${Date.now()}`;
                await exec(`git config --global user.name "github-actions[bot]"`);
                await exec(`git config --global user.email "github-actions[bot]@users.noreply.github.com"`);
                await exec(`git checkout -b ${branchName}`);
                
                // 创建文件内容（添加frontmatter）
                const fileContent = [
                  '---',
                  `title: ${contentTitle}`,
                  '---',
                  '',
                  markdownContent
                ].join('\n');
                
                // 将内容写入文件
                const targetPath = path.join(srcDir, targetDir, filename);
                fs.writeFileSync(targetPath, fileContent);
                console.log(`文件已创建: ${targetPath}`);
                
                // 提交更改
                await exec(`git add "${targetPath}"`);
                await exec(`git commit -m "feat(${targetDir}): 添加 ${contentTitle}"`);
                await exec(`git push origin ${branchName}`);
                
                // 创建PR
                const { data: pullRequest } = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `添加内容: ${contentTitle}`,
                  body: `从Issue #${issue.number} 自动创建的PR\n\n添加内容到 ${departmentName} 部门`,
                  head: branchName,
                  base: 'main'
                });
                
                console.log(`PR已创建: ${pullRequest.html_url}`);
                
                // 在Issue中添加评论，链接到PR
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `✅ 已自动创建内容文件并提交PR: ${pullRequest.html_url}`
                });
              } catch (error) {
                console.error(`处理过程中发生错误: ${error.message}`);
                throw error;
              }
            }
            
            // 辅助函数：执行shell命令
            async function exec(command) {
              const { execSync } = require('child_process');
              console.log(`执行命令: ${command}`);
              return execSync(command, { encoding: 'utf8' });
            }
            
            // 运行主函数
            return run(); 